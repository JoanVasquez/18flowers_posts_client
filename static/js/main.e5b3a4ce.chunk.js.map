{"version":3,"sources":["utils/actionCreator.ts","store/actions/postActionType.ts","store/actions/postAction.ts","services/PostService.ts","constants/BASE_URL.ts","store/actions/paginationActionTye.ts","store/actions/paginationAction.ts","services/PaginationService.ts","utils/paginatIonUtil.js","constants/APP_CONST.ts","components/Paginator.tsx","components/Form.tsx","components/Modal.tsx","components/DataTable.tsx","loading.svg","components/Filter.tsx","App.tsx","utils/filterUtil.js","utils/reducerCreator.ts","store/reducers/posts/postReducer.ts","store/reducers/pagination/paginationReducer.ts","store/reducers/allReducers.ts","store/store.ts","index.tsx"],"names":["actionCreator","type","argNames","values","length","action","forEach","arg","index","LOADING_POST","GET_POSTS","UPDATE_POST","GET_POSTS_ERROR","postService","url","this","axios","get","result","data","response","statusText","status","post","put","SET_PAGINATION","RESET_PAGINATION","paginationService","currentPage","dataSet","paginate","pageSize","paginatorData","Paginator","build","pages","Array","last_page","first_page","keys","map","paginatedData","slice","first_result","last_result","pagination","totalData","setPagination","paginator","React","memo","onPagination","className","href","has_previous_page","onClick","event","preventDefault","page","has_next_page","current_page","next_page","Form","useState","title","setTitle","body","setBody","isValid","setIsValid","dispatch","useDispatch","useEffect","htmlFor","id","onChange","target","value","rows","update","then","catch","ex","updatePost","data-bs-dismiss","Modal","children","aria-label","DataTable","posts","userId","setPost","scope","data-bs-toggle","data-bs-target","data-bs-backdrop","data-bs-keyboard","aria-labelledby","aria-hidden","Filter","onFilter","placeholder","App","useSelector","state","postReducer","isLoading","errors","error","paginationReducer","setCurrentPage","list","onPaginator","useCallback","filterBy","filterText","text","filteredBy","filteredDataSet","Set","toLowerCase","includes","add","filteredData","from","genericFilteredItem","src","loading","reducerCreator","initialState","reducers","hasOwnProperty","isUpdated","payload","findIndex","item","success","combineReducers","store","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","allReducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"yQAceA,EAdO,SAACC,GAAoC,IAAD,uBAAlBC,EAAkB,iCAAlBA,EAAkB,kBACxD,OAAO,WAAqB,IAAD,uBAAhBC,EAAgB,yBAAhBA,EAAgB,gBACzB,GAAID,EAASE,SAAWD,EAAOC,OAAQ,CACrC,IAAIC,EAAc,CAAEJ,QAMpB,OALIC,EAASE,QAAUD,EAAOC,QAC5BF,EAASI,SAAQ,SAACC,EAAUC,GAC1BH,EAAOH,EAASM,IAAUL,EAAOK,MAG9BH,KCTAI,EAAe,wBACfC,EAAY,oBACZC,EAAc,sBACdC,EAAkB,0BCQzBC,EAA2B,I,WCJ/B,aAAe,yBAFPC,IAAc,GAIlBC,KAAKD,ICNT,+D,4LDiBwCE,IAAMC,IAAN,UAAaF,KAAKD,IAAlB,c,cAA9BI,E,yBACCA,EAAOC,M,sCAER,CACJA,KAAM,KAAGC,SAASC,WAClBC,OAAQ,KAAGF,SAASE,Q,qLAKNC,G,gGAEoBP,IAAMQ,IAAN,UAC/BT,KAAKD,IAD0B,aAElCS,G,cAFIL,E,yBAICA,EAAOC,M,sCAER,CACJA,KAAM,KAAGC,SAASC,WAClBC,OAAQ,KAAGF,SAASE,Q,wHExCfG,EAAiB,8BACjBC,EAAmB,gC,wBCG1BC,EAAoB,ICD1B,sGACuBC,EAAqBC,GACxC,IAAMC,ECHgB,SAACF,EAAaG,GAA4B,IAAlBF,EAAiB,uDAAP,GAEtDG,EADY,IAAIC,IAAUF,EAAU,GACVG,MAAML,EAAQzB,OAAQwB,GAEhDO,EAAQ,YACPC,MAAMJ,EAAcK,UAAY,EAAIL,EAAcM,YAAYC,QACjEC,KAAI,SAAChC,GAAD,OAAWwB,EAAcM,WAAa9B,KAW5C,MALW,CACTiC,cALkBZ,EAAQa,MAC1BV,EAAcW,aACdX,EAAcY,YAAc,GAI5BZ,gBACAG,SDZiBU,CAAWjB,EELC,EFK+BC,GAC5D,MAAO,CACLM,MAAOL,EAASK,MAChBM,cAAeX,EAASW,cACxBT,cAAeF,EAASE,cACxBc,UAAWjB,OAPjB,MDGakB,EAAgB,SAACnB,EAAqBC,GACjD,IAAMmB,EAAYrB,EAAkBoB,cAAcnB,EAAaC,GAC/D,OAAO7B,EAAcyB,EAAgB,UAA9BzB,CAAyCgD,IIArCf,EAAYgB,IAAMC,MAC7B,YAA6D,IAA1Df,EAAyD,EAAzDA,MAAOgB,EAAkD,EAAlDA,aAAcnB,EAAoC,EAApCA,cACtB,OACE,sBAAKoB,UAAU,kBAAf,UACE,mBACEC,KAAK,KACLD,UAAS,UAAMpB,EAAcsB,kBAAgC,GAAZ,WACjDC,QAAS,SAACC,GACRA,EAAMC,iBACNN,EAAanB,EAAcM,aAL/B,mBAUA,mBACEe,KAAK,KACLD,UAAS,UAAMpB,EAAcsB,kBAAgC,GAAZ,WACjDC,QAAS,SAACC,GACRA,EAAMC,iBACNN,EAAanB,EAAcM,aAL/B,kBAUCH,EAAMK,KAAI,SAACkB,EAAMlD,GAAP,OACT,mBAEE6C,KAAK,KACLD,UAAS,UACNpB,EAAcsB,mBAAsBtB,EAAc2B,cAE/C,GADA,UAFG,YAIL3B,EAAc4B,eAAiBF,EAAO,SAAW,IACrDH,QAAS,SAACC,GACRA,EAAMC,iBACNN,EAAaO,IAVjB,SAaGA,GAZIlD,MAeT,mBACE6C,KAAK,KACLD,UAAS,WAAOpB,EAAc2B,cAA4B,GAAZ,WAC9CJ,QAAS,SAACC,GACRA,EAAMC,iBACNN,EAAanB,EAAc6B,YAL/B,kBAUA,mBACER,KAAK,KACLD,UAAS,UAAMpB,EAAc2B,cAA4B,GAAZ,WAC7CJ,QAAS,SAACC,GACRA,EAAMC,iBACNN,EAAanB,EAAcK,YAL/B,wBClDKyB,EAAO,SAAC,GAAyB,IAAvBvC,EAAsB,EAAtBA,KAAsB,EACjBwC,mBAAS,IADQ,mBACpCC,EADoC,KAC7BC,EAD6B,OAEnBF,mBAAS,IAFU,mBAEpCG,EAFoC,KAE9BC,EAF8B,OAGbJ,oBAAS,GAHI,mBAGpCK,EAHoC,KAG3BC,EAH2B,KAIrCC,EAAWC,cAEjBC,qBAAU,WACRP,EAAS1C,EAAKyC,OACdG,EAAQ5C,EAAK2C,QACZ,CAAC3C,EAAM0C,EAAUE,IAapB,OACE,iCACGC,EACC,qBAAKhB,UAAU,sBAAf,2CACE,KACJ,sBAAKA,UAAU,OAAf,UACE,uBAAOqB,QAAQ,QAAQrB,UAAU,aAAjC,mBAGA,uBACEnD,KAAK,QACLmD,UAAU,eACVsB,GAAG,QACHC,SAAU,SAACnB,GAAD,OAAWS,EAAST,EAAMoB,OAAOC,QAC3CA,MAAOb,OAGX,sBAAKZ,UAAU,OAAf,UACE,uBAAOqB,QAAQ,OAAOrB,UAAU,aAAhC,kBAGA,0BACEA,UAAU,eACVsB,GAAG,OACHI,KAAM,EACNH,SAAU,SAACnB,GAAD,OAAWW,EAAQX,EAAMoB,OAAOC,QAC1CA,MAAOX,OAIX,wBACEX,QA1CW,WACVS,EAAM5D,QAAW8D,EAAK9D,QAGzBiE,GAAW,GACX9C,EAAKyC,MAAQA,EACbzC,EAAK2C,KAAOA,EACZI,ETEoB,SAAC/C,GACzB,OAAO,SAAC+C,GACNA,EAAStE,EAAcS,EAAc,UAA5BT,EAAuC,IAChDa,EACGkE,OAAOxD,GACPyD,MAAK,SAAC7D,GACLmD,EAAStE,EAAcW,EAAa,UAA3BX,CAAsCmB,IAC/CmD,EAAStE,EAAcS,EAAc,UAA5BT,EAAuC,OAEjDiF,OAAM,SAACC,GACNZ,EAAStE,EAAcY,EAAiB,UAA/BZ,CAA0CkF,IACnDZ,EAAStE,EAAcS,EAAc,UAA5BT,EAAuC,QSbzCmF,CAAW5D,KALpB8C,GAAW,IAyCTe,kBAAgB,QAChBhC,UAAU,kBAHZ,sBCtDOiC,EAAQ,SAAC,GAAqC,IAAnCrB,EAAkC,EAAlCA,MAAOsB,EAA2B,EAA3BA,SAC7B,OACE,qBAAKlC,UAAU,eAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,cAAcsB,GAAG,sBAA/B,SACGV,IAEH,wBACE/D,KAAK,SACLmD,UAAU,YACVgC,kBAAgB,QAChBG,aAAW,aAGf,qBAAKnC,UAAU,aAAf,SAA6BkC,IAC7B,qBAAKlC,UAAU,eAAf,SACE,wBACEnD,KAAK,SACLmD,UAAU,oBACVgC,kBAAgB,QAHlB,2BCfGI,EAAY,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAwB,EAC1B1B,mBAAS,CAC/BW,GAAI,EACJgB,OAAQ,EACR1B,MAAO,GACPE,KAAM,KAL0C,mBAC3C3C,EAD2C,KACrCoE,EADqC,KAQlD,OACE,sBAAKvC,UAAU,mBAAf,UACE,wBAAOA,UAAU,qBAAjB,UACE,uBAAOA,UAAU,yBAAjB,SACE,+BACE,oBAAIwC,MAAM,MAAMxC,UAAU,QAA1B,gBAGA,oBAAIwC,MAAM,MAAMxC,UAAU,QAA1B,qBAGA,oBAAIwC,MAAM,MAAMxC,UAAU,QAA1B,mBAGA,oBAAIwC,MAAM,MAAMxC,UAAU,QAA1B,kBAGA,oBAAIwC,MAAM,MAAMxC,UAAU,IAA1B,0BAKJ,uBAAOA,UAAU,cAAjB,SACGqC,EAAMjD,KAAI,SAACjB,GACV,OACE,+BACE,6BAAKA,EAAKmD,KACV,6BAAKnD,EAAKmE,SACV,6BAAKnE,EAAKyC,QACV,6BAAKzC,EAAK2C,OACV,6BACE,wBACEd,UAAU,kBACVyC,iBAAe,QACfC,iBAAe,kBACfvC,QAAS,kBAAMoC,EAAQpE,IAJzB,+BAcZ,qBACE6B,UAAU,aACVsB,GAAG,iBACHqB,mBAAiB,SACjBC,mBAAiB,QACjBC,kBAAgB,sBAChBC,cAAY,OANd,SAQE,cAAC,EAAD,CAAOlC,MAAM,YAAb,SACE,cAAC,EAAD,CAAMzC,KAAMA,YCvEP,MAA0B,oCCO5B4E,EAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAIvB,OACE,uBACEhD,UAAU,oBACVnD,KAAK,OACLoG,YAAY,+BACZ1B,SARkB,SAACnB,GACrB4C,EAAS,QAAS5C,EAAMoB,OAAOC,WCwEpByB,EAtEH,WACV,IAAMb,EAAQc,aAAY,SAACC,GAAD,OAAgBA,EAAMC,YAAYhB,SACtDiB,EAAYH,aAAY,SAACC,GAAD,OAAgBA,EAAMC,YAAYC,aAC1DC,EAASJ,aAAY,SAACC,GAAD,OAAgBA,EAAMC,YAAYG,SACvD5D,EAAYuD,aAChB,SAACC,GAAD,OAAgBA,EAAMK,kBAAkB7D,aAEpCsB,EAAWC,cAPD,EAQsBR,mBAAS,GAR/B,mBAQTnC,EARS,KAQIkF,EARJ,KAUhBtC,qBAAU,WACRF,GdRK,SAACA,GACNA,EAAStE,EAAcS,EAAc,UAA5BT,EAAuC,IAChDa,EACGkG,OACA/B,MAAK,SAAC7D,GACLmD,EAAStE,EAAcU,EAAW,UAAzBV,CAAoCmB,EAAKD,SAClDoD,EAAStE,EAAcS,EAAc,UAA5BT,EAAuC,OAEjDiF,OAAM,SAACC,GACNZ,EAAStE,EAAcY,EAAiB,UAA/BZ,CAA0CkF,IACnDZ,EAAStE,EAAcS,EAAc,UAA5BT,EAAuC,YcDnD,CAACsE,IAEJE,qBAAU,WACRF,EAASvB,EAAc,EAAG0C,MACzB,CAACA,EAAOnB,IAEX,IAAM0C,EAAcC,uBAClB,SAACrF,GACC0C,EAASvB,EAAcnB,EAAa6D,IACpCqB,EAAelF,KAEjB,CAAC0C,EAAUmB,IAGPW,EAAWa,uBACf,SAACC,EAAUC,GACT,GAAIA,EAAY,CACd,IAAMrF,ECtCqB,SAACsF,EAAMC,EAAYtF,EAAUF,GAC9D,IAAMyF,EAAkB,IAAIC,IAC5B1F,EAAQvB,SAAQ,SAACa,GACXA,EAAKkG,GAAYG,cAAcC,SAASL,EAAKI,gBAC/CF,EAAgBI,IAAIvG,MAIxB,IAAMwG,EAAevF,MAAMwF,KAAKN,GAE5BtF,EADY,IAAIC,IAAUF,EAAU,GACVG,MAAMyF,EAAavH,OAAQ,GACrD+B,EAAQ,YACPC,MAAMJ,EAAcK,UAAY,EAAIL,EAAcM,YAAYC,QACjEC,KAAI,SAAChC,GAAD,OAAWwB,EAAcM,WAAa9B,KAW5C,MANW,CACTiC,cALkBkF,EAAajF,MAC/BV,EAAcW,aACdX,EAAcY,YAAc,GAI5BZ,gBACAG,QACAwF,gBDgBqBE,CACfV,EACAD,EP1CuB,EO4CvBzB,GAEFnB,EAASvB,EAAc,EAAGjB,EAAS6F,oBAEnCX,EAAYvB,KAGhB,CAACA,EAAO7D,EAAa0C,EAAU0C,IAGjC,OACE,qBAAK5D,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,2BAAf,UACE,kDACA,uBACA,cAAC,EAAD,CAAQgD,SAAUA,IACjBO,EAAOxF,KACN,qBAAKiC,UAAU,qBAAf,SAAqCuD,EAAOxF,OAC1C,KACHuF,EACC,qBAAKtD,UAAU,cAAf,SACE,qBAAK0E,IAAKC,MAEV,KACJ,cAAC,EAAD,CAAWtC,MAAOzC,EAAUP,gBAC5B,cAACR,EAAD,CACEE,MAAOa,EAAUb,MACjBH,cAAegB,EAAUhB,cACzBmB,aAAc6D,Y,6BEhEXgB,EATQ,SAACC,EAAmBC,GACzC,OAAO,WAAwC,IAAvC1B,EAAsC,uDAA9ByB,EAAc5H,EAAgB,uCAC5C,OAAI6H,EAASC,eAAe9H,EAAOJ,MAC1BiI,EAAS7H,EAAOJ,MAAMuG,EAAOnG,GAE/BmG,ICmDIwB,IAxCkB,CAC/BtB,WAAW,EACXjB,MAAO,GACP2C,WAAW,EACXxB,MAAO,KAGa,mBACnBlG,GAAY,SAAC8F,EAAmBnG,GAC/B,OAAO,2BACFmG,GADL,IAEEf,MAAOpF,EAAOgI,aAJE,cAOnB1H,GAAc,SAAC6F,EAAmBnG,GACjC,IAAMG,EAAQgG,EAAMf,MAAM6C,WACxB,SAACC,GAAD,OAAUA,EAAK7D,KAAOrE,EAAOgI,QAAQnH,OAAOwD,MAExCe,EAAkB,YAAOe,EAAMf,OAErC,OADAA,EAAMjF,GAASH,EAAOgI,QAAQnH,OACvB,2BACFsF,GADL,IAEE4B,UAAW/H,EAAOgI,QAAQG,QAC1B/C,aAhBgB,cAmBnBhF,GAAe,SAAC+F,EAAmBnG,GAClC,OAAO,2BACFmG,GADL,IAEEE,UAAWrG,EAAOgI,aAtBF,cAyBnBzH,GAAkB,SAAC4F,EAAmBnG,GACrC,OAAO,2BACFmG,GADL,IAEEI,MAAOvG,EAAOgI,aA5BE,ICWPL,IA5BM,CACnBhF,UAAW,CACTb,MAAO,GACPH,cAAe,GACfS,cAAe,GACfK,UAAW,MAIO,mBACnBrB,GAAiB,SAAC+E,EAAYnG,GAC7B,OAAO,2BACFmG,GADL,IAEExD,UAAW3C,EAAOgI,aAJF,cAOnB3G,GAAmB,SAAC8E,EAAYnG,GAC/B,MAAO,CACL2C,UAAW,CACTb,MAAO,GACPH,cAAe,GACfS,cAAe,GACfK,UAAW,QAbG,ICXP2F,cAAgB,CAC7BhC,cACAI,sBCaa6B,GATUC,OAAOC,sCAAwCC,IAEnDC,YACnBC,EAEIC,YAAgBC,OCRtBC,IAASC,OACP,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFU,SAASC,eAAe,W","file":"static/js/main.e5b3a4ce.chunk.js","sourcesContent":["const actionCreator = (type: string, ...argNames: any) => {\r\n  return (...values: any) => {\r\n    if (argNames.length === values.length) {\r\n      let action: any = { type };\r\n      if (argNames.length && values.length) {\r\n        argNames.forEach((arg: any, index: number) => {\r\n          action[argNames[index]] = values[index];\r\n        });\r\n      }\r\n      return action;\r\n    }\r\n  };\r\n};\r\n\r\nexport default actionCreator;\r\n","export const LOADING_POST = \"[POSTS] LOADING POSTS\";\r\nexport const GET_POSTS = \"[POSTS] GET POSTS\";\r\nexport const UPDATE_POST = \"[POSTS] UPDATE POST\";\r\nexport const GET_POSTS_ERROR = \"[POSTS] GET POSTS ERROR\";\r\n","import { Dispatch } from \"redux\";\r\nimport Post from \"../../models/Post\";\r\nimport PostService from \"../../services/PostService\";\r\nimport actionCreator from \"../../utils/actionCreator\";\r\nimport {\r\n  GET_POSTS,\r\n  GET_POSTS_ERROR,\r\n  LOADING_POST,\r\n  UPDATE_POST,\r\n} from \"./postActionType\";\r\n\r\nconst postService: PostService = new PostService();\r\n\r\nexport const getPosts = (): any => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(actionCreator(LOADING_POST, \"payload\")(true));\r\n    postService\r\n      .list()\r\n      .then((data: any) => {\r\n        dispatch(actionCreator(GET_POSTS, \"payload\")(data.result));\r\n        dispatch(actionCreator(LOADING_POST, \"payload\")(false));\r\n      })\r\n      .catch((ex) => {\r\n        dispatch(actionCreator(GET_POSTS_ERROR, \"payload\")(ex));\r\n        dispatch(actionCreator(LOADING_POST, \"payload\")(false));\r\n      });\r\n  };\r\n};\r\n\r\nexport const updatePost = (post: Post): any => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(actionCreator(LOADING_POST, \"payload\")(true));\r\n    postService\r\n      .update(post)\r\n      .then((data: any) => {\r\n        dispatch(actionCreator(UPDATE_POST, \"payload\")(data));\r\n        dispatch(actionCreator(LOADING_POST, \"payload\")(false));\r\n      })\r\n      .catch((ex) => {\r\n        dispatch(actionCreator(GET_POSTS_ERROR, \"payload\")(ex));\r\n        dispatch(actionCreator(LOADING_POST, \"payload\")(false));\r\n      });\r\n  };\r\n};\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { DEV_URL, PROD_URL } from \"../constants/BASE_URL\";\r\nimport Post from \"../models/Post\";\r\n\r\nexport default class PostService {\r\n  private url: string = \"\";\r\n\r\n  constructor() {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n      this.url = PROD_URL;\r\n    } else if (\r\n      process.env.NODE_ENV === \"development\" ||\r\n      process.env.NODE_ENV === \"test\"\r\n    ) {\r\n      this.url = DEV_URL;\r\n    }\r\n  }\r\n\r\n  public async list(): Promise<any> {\r\n    try {\r\n      const result: AxiosResponse = await axios.get(`${this.url}/api/post`);\r\n      return result.data;\r\n    } catch (ex) {\r\n      throw {\r\n        data: ex.response.statusText,\r\n        status: ex.response.status,\r\n      };\r\n    }\r\n  }\r\n\r\n  public async update(post: Post): Promise<any> {\r\n    try {\r\n      const result: AxiosResponse = await axios.put(\r\n        `${this.url}/api/post`,\r\n        post\r\n      );\r\n      return result.data;\r\n    } catch (ex) {\r\n      throw {\r\n        data: ex.response.statusText,\r\n        status: ex.response.status,\r\n      };\r\n    }\r\n  }\r\n}\r\n","export const DEV_URL =\r\n  \"http://localhost:5001/flowers-3e335/us-central1/default\";\r\nexport const PROD_URL =\r\n  \"https://us-central1-flowers-3e335.cloudfunctions.net/default\";\r\n","export const SET_PAGINATION = \"[PAGINATION] SET PAGINATION\";\r\nexport const RESET_PAGINATION = \"[PAGINATION] RESET PAGINATION\";\r\n","import { SET_PAGINATION, RESET_PAGINATION } from \"./paginationActionTye\";\r\nimport { PaginationService } from \"../../services/PaginationService\";\r\nimport actionCreator from \"../../utils/actionCreator\";\r\n\r\nconst paginationService = new PaginationService();\r\n\r\nexport const setPagination = (currentPage: number, dataSet: any) => {\r\n  const paginator = paginationService.setPagination(currentPage, dataSet);\r\n  return actionCreator(SET_PAGINATION, \"payload\")(paginator);\r\n};\r\n\r\nexport const resetPagination = () => {\r\n  return actionCreator(RESET_PAGINATION)();\r\n};\r\n","import { QTY_ITEMS_BY_PAGE } from \"../constants/APP_CONST\";\r\nimport { pagination } from \"../utils/paginatIonUtil\";\r\n\r\nexport class PaginationService {\r\n  public setPagination(currentPage: number, dataSet: any) {\r\n    const paginate = pagination(currentPage, QTY_ITEMS_BY_PAGE, dataSet);\r\n    return {\r\n      pages: paginate.pages,\r\n      paginatedData: paginate.paginatedData,\r\n      paginatorData: paginate.paginatorData,\r\n      totalData: dataSet,\r\n    };\r\n  }\r\n}\r\n","import Paginator from \"paginator\";\r\n\r\nexport const pagination = (currentPage, pageSize, dataSet = []) => {\r\n  let paginator = new Paginator(pageSize, 5);\r\n  let paginatorData = paginator.build(dataSet.length, currentPage);\r\n\r\n  let pages = [\r\n    ...Array(paginatorData.last_page + 1 - paginatorData.first_page).keys(),\r\n  ].map((index) => paginatorData.first_page + index);\r\n\r\n  let paginatedData = dataSet.slice(\r\n    paginatorData.first_result,\r\n    paginatorData.last_result + 1\r\n  );\r\n  let data = {\r\n    paginatedData,\r\n    paginatorData,\r\n    pages,\r\n  };\r\n  return data;\r\n};\r\n","export const QTY_ITEMS_BY_PAGE = 5;\r\n","import React from \"react\";\r\n\r\ntype PaginatorProps = {\r\n  pages: [];\r\n  paginatorData: any;\r\n  onPagination: Function;\r\n};\r\n\r\nexport const Paginator = React.memo(\r\n  ({ pages, onPagination, paginatorData }: PaginatorProps) => {\r\n    return (\r\n      <div className=\"pagination mt-3\">\r\n        <a\r\n          href=\"/#\"\r\n          className={`${!paginatorData.has_previous_page ? \"disable\" : \"\"}`}\r\n          onClick={(event) => {\r\n            event.preventDefault();\r\n            onPagination(paginatorData.first_page);\r\n          }}\r\n        >\r\n          First\r\n        </a>\r\n        <a\r\n          href=\"/#\"\r\n          className={`${!paginatorData.has_previous_page ? \"disable\" : \"\"}`}\r\n          onClick={(event) => {\r\n            event.preventDefault();\r\n            onPagination(paginatorData.first_page);\r\n          }}\r\n        >\r\n          &laquo;\r\n        </a>\r\n        {pages.map((page, index) => (\r\n          <a\r\n            key={index}\r\n            href=\"/#\"\r\n            className={`${\r\n              !paginatorData.has_previous_page && !paginatorData.has_next_page\r\n                ? \"disable\"\r\n                : \"\"\r\n            } ${paginatorData.current_page === page ? \"active\" : \"\"}`}\r\n            onClick={(event) => {\r\n              event.preventDefault();\r\n              onPagination(page);\r\n            }}\r\n          >\r\n            {page}\r\n          </a>\r\n        ))}\r\n        <a\r\n          href=\"/#\"\r\n          className={` ${!paginatorData.has_next_page ? \"disable\" : \"\"}`}\r\n          onClick={(event) => {\r\n            event.preventDefault();\r\n            onPagination(paginatorData.next_page);\r\n          }}\r\n        >\r\n          &raquo;\r\n        </a>\r\n        <a\r\n          href=\"/#\"\r\n          className={`${!paginatorData.has_next_page ? \"disable\" : \"\"}`}\r\n          onClick={(event) => {\r\n            event.preventDefault();\r\n            onPagination(paginatorData.last_page);\r\n          }}\r\n        >\r\n          Last\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Post from \"../models/Post\";\r\nimport { updatePost } from \"../store/actions/postAction\";\r\n\r\ntype FormProps = {\r\n  post: Post;\r\n};\r\n\r\nexport const Form = ({ post }: FormProps) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [body, setBody] = useState(\"\");\r\n  const [isValid, setIsValid] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    setTitle(post.title);\r\n    setBody(post.body);\r\n  }, [post, setTitle, setBody]);\r\n\r\n  const onSubmit = () => {\r\n    if (!title.length || !body.length) {\r\n      setIsValid(true);\r\n    } else {\r\n      setIsValid(false);\r\n      post.title = title;\r\n      post.body = body;\r\n      dispatch(updatePost(post));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      {isValid ? (\r\n        <div className=\"alert alert-warning\">Title or body cannot be empty</div>\r\n      ) : null}\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"title\" className=\"form-label\">\r\n          Title\r\n        </label>\r\n        <input\r\n          type=\"email\"\r\n          className=\"form-control\"\r\n          id=\"title\"\r\n          onChange={(event) => setTitle(event.target.value)}\r\n          value={title}\r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"body\" className=\"form-label\">\r\n          Body\r\n        </label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"body\"\r\n          rows={6}\r\n          onChange={(event) => setBody(event.target.value)}\r\n          value={body}\r\n        ></textarea>\r\n      </div>\r\n\r\n      <button\r\n        onClick={onSubmit}\r\n        data-bs-dismiss=\"modal\"\r\n        className=\"btn btn-primary\"\r\n      >\r\n        Send\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\ntype ModalProps = {\r\n  title: string;\r\n  children: any;\r\n};\r\n\r\nexport const Modal = ({ title, children }: ModalProps) => {\r\n  return (\r\n    <div className=\"modal-dialog\">\r\n      <div className=\"modal-content\">\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title\" id=\"staticBackdropLabel\">\r\n            {title}\r\n          </h5>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-close\"\r\n            data-bs-dismiss=\"modal\"\r\n            aria-label=\"Close\"\r\n          ></button>\r\n        </div>\r\n        <div className=\"modal-body\">{children}</div>\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-bs-dismiss=\"modal\"\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Post from \"../models/Post\";\r\nimport { Form } from \"./Form\";\r\nimport { Modal } from \"./Modal\";\r\n\r\ntype TableProps = {\r\n  posts: Array<Post>;\r\n};\r\n\r\nexport const DataTable = ({ posts }: TableProps) => {\r\n  const [post, setPost] = useState({\r\n    id: 0,\r\n    userId: 0,\r\n    title: \"\",\r\n    body: \"\",\r\n  });\r\n\r\n  return (\r\n    <div className=\"table-responsive\">\r\n      <table className=\"table align-middle\">\r\n        <thead className=\"text-center table-dark\">\r\n          <tr>\r\n            <th scope=\"col\" className=\"col-1\">\r\n              ID\r\n            </th>\r\n            <th scope=\"col\" className=\"col-1\">\r\n              USER ID\r\n            </th>\r\n            <th scope=\"col\" className=\"col-4\">\r\n              TITLE\r\n            </th>\r\n            <th scope=\"col\" className=\"col-4\">\r\n              BODY\r\n            </th>\r\n            <th scope=\"col\" className=\"2\">\r\n              ACTIONS\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody className=\"text-center\">\r\n          {posts.map((post: Post) => {\r\n            return (\r\n              <tr>\r\n                <th>{post.id}</th>\r\n                <th>{post.userId}</th>\r\n                <td>{post.title}</td>\r\n                <td>{post.body}</td>\r\n                <td>\r\n                  <button\r\n                    className=\"btn btn-primary\"\r\n                    data-bs-toggle=\"modal\"\r\n                    data-bs-target=\"#staticBackdrop\"\r\n                    onClick={() => setPost(post)}\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <div\r\n        className=\"modal fade\"\r\n        id=\"staticBackdrop\"\r\n        data-bs-backdrop=\"static\"\r\n        data-bs-keyboard=\"false\"\r\n        aria-labelledby=\"staticBackdropLabel\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <Modal title=\"Edit Post\">\r\n          <Form post={post} />\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/loading.600cf2d1.svg\";","import { type } from \"os\";\r\nimport React from \"react\";\r\n\r\ntype FilterProps = {\r\n  onFilter: Function;\r\n};\r\n\r\nexport const Filter = ({ onFilter }: FilterProps) => {\r\n  const handlerFilter = (event: any) => {\r\n    onFilter(\"title\", event.target.value);\r\n  };\r\n  return (\r\n    <input\r\n      className=\"form-control mb-3\"\r\n      type=\"text\"\r\n      placeholder=\"Search any post by the title\"\r\n      onChange={handlerFilter}\r\n    />\r\n  );\r\n};\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getPosts } from \"./store/actions/postAction\";\r\nimport { setPagination } from \"./store/actions/paginationAction\";\r\nimport { Paginator } from \"./components/Paginator\";\r\nimport { DataTable } from \"./components/DataTable\";\r\nimport loading from \"./loading.svg\";\r\nimport { genericFilteredItem } from \"./utils/filterUtil\";\r\nimport { QTY_ITEMS_BY_PAGE } from \"./constants/APP_CONST\";\r\nimport { Filter } from \"./components/Filter\";\r\n\r\nconst App = () => {\r\n  const posts = useSelector((state: any) => state.postReducer.posts);\r\n  const isLoading = useSelector((state: any) => state.postReducer.isLoading);\r\n  const errors = useSelector((state: any) => state.postReducer.error);\r\n  const paginator = useSelector(\r\n    (state: any) => state.paginationReducer.paginator\r\n  );\r\n  const dispatch = useDispatch();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  useEffect(() => {\r\n    dispatch(getPosts());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch(setPagination(1, posts));\r\n  }, [posts, dispatch]);\r\n\r\n  const onPaginator = useCallback(\r\n    (currentPage) => {\r\n      dispatch(setPagination(currentPage, posts));\r\n      setCurrentPage(currentPage);\r\n    },\r\n    [dispatch, posts]\r\n  );\r\n\r\n  const onFilter = useCallback(\r\n    (filterBy, filterText) => {\r\n      if (filterText) {\r\n        const paginate = genericFilteredItem(\r\n          filterText,\r\n          filterBy,\r\n          QTY_ITEMS_BY_PAGE,\r\n          posts\r\n        );\r\n        dispatch(setPagination(1, paginate.filteredData));\r\n      } else {\r\n        onPaginator(posts);\r\n      }\r\n    },\r\n    [posts, currentPage, dispatch, onPaginator]\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-12 bg-white mt-5 p-4\">\r\n          <h1>POSTS APLICATION</h1>\r\n          <hr />\r\n          <Filter onFilter={onFilter} />\r\n          {errors.data ? (\r\n            <div className=\"alert alert-danger\">{errors.data}</div>\r\n          ) : null}\r\n          {isLoading ? (\r\n            <div className=\"text-center\">\r\n              <img src={loading} />\r\n            </div>\r\n          ) : null}\r\n          <DataTable posts={paginator.paginatedData} />\r\n          <Paginator\r\n            pages={paginator.pages}\r\n            paginatorData={paginator.paginatorData}\r\n            onPagination={onPaginator}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import Paginator from \"paginator\";\r\n\r\nexport const genericFilteredItem = (text, filteredBy, pageSize, dataSet) => {\r\n  const filteredDataSet = new Set();\r\n  dataSet.forEach((data) => {\r\n    if (data[filteredBy].toLowerCase().includes(text.toLowerCase())) {\r\n      filteredDataSet.add(data);\r\n    }\r\n  });\r\n\r\n  const filteredData = Array.from(filteredDataSet);\r\n  let paginator = new Paginator(pageSize, 7);\r\n  let paginatorData = paginator.build(filteredData.length, 1);\r\n  let pages = [\r\n    ...Array(paginatorData.last_page + 1 - paginatorData.first_page).keys(),\r\n  ].map((index) => paginatorData.first_page + index);\r\n  let paginatedData = filteredData.slice(\r\n    paginatorData.first_result,\r\n    paginatorData.last_result + 1\r\n  );\r\n  let data = {\r\n    paginatedData,\r\n    paginatorData,\r\n    pages,\r\n    filteredData,\r\n  };\r\n  return data;\r\n};\r\n\r\nexport const genericFilterItemByObject = (\r\n  text,\r\n  filteredBy,\r\n  pageSize,\r\n  dataSet\r\n) => {\r\n  const filteredDataSet = new Set();\r\n  dataSet.forEach((dataToFilter) => {\r\n    dataToFilter[filteredBy].items.forEach((determine) => {\r\n      if (determine.name.toLowerCase().includes(text.toLowerCase())) {\r\n        filteredDataSet.add(dataToFilter);\r\n      }\r\n    });\r\n  });\r\n\r\n  const filteredData = Array.from(filteredDataSet);\r\n  let paginator = new Paginator(pageSize, 7);\r\n  let paginatorData = paginator.build(filteredData.length, 1);\r\n  let pages = [\r\n    ...Array(paginatorData.last_page + 1 - paginatorData.first_page).keys(),\r\n  ].map((index) => paginatorData.first_page + index);\r\n  let paginatedData = filteredData.slice(\r\n    paginatorData.first_result,\r\n    paginatorData.last_result + 1\r\n  );\r\n\r\n  let data = {\r\n    paginatedData,\r\n    paginatorData,\r\n    pages,\r\n    filteredData,\r\n  };\r\n\r\n  return data;\r\n};\r\n","const reducerCreator = (initialState: any, reducers: any) => {\r\n  return (state = initialState, action: any) => {\r\n    if (reducers.hasOwnProperty(action.type)) {\r\n      return reducers[action.type](state, action);\r\n    }\r\n    return state;\r\n  };\r\n};\r\n\r\nexport default reducerCreator;\r\n","import Post from \"../../../models/Post\";\r\nimport reducerCreator from \"../../../utils/reducerCreator\";\r\nimport {\r\n  GET_POSTS,\r\n  GET_POSTS_ERROR,\r\n  LOADING_POST,\r\n  UPDATE_POST,\r\n} from \"../../actions/postActionType\";\r\n\r\ntype StateModel = {\r\n  isLoading: boolean;\r\n  posts: Array<Post>;\r\n  isUpdated: boolean;\r\n  error: any;\r\n};\r\n\r\nconst initialState: StateModel = {\r\n  isLoading: false,\r\n  posts: [],\r\n  isUpdated: false,\r\n  error: {},\r\n};\r\n\r\nconst postReducer: any = {\r\n  [GET_POSTS]: (state: StateModel, action: any) => {\r\n    return {\r\n      ...state,\r\n      posts: action.payload,\r\n    };\r\n  },\r\n  [UPDATE_POST]: (state: StateModel, action: any) => {\r\n    const index = state.posts.findIndex(\r\n      (item) => item.id === action.payload.result.id\r\n    );\r\n    const posts: Array<Post> = [...state.posts];\r\n    posts[index] = action.payload.result;\r\n    return {\r\n      ...state,\r\n      isUpdated: action.payload.success,\r\n      posts,\r\n    };\r\n  },\r\n  [LOADING_POST]: (state: StateModel, action: any) => {\r\n    return {\r\n      ...state,\r\n      isLoading: action.payload,\r\n    };\r\n  },\r\n  [GET_POSTS_ERROR]: (state: StateModel, action: any) => {\r\n    return {\r\n      ...state,\r\n      error: action.payload,\r\n    };\r\n  },\r\n};\r\n\r\nexport default reducerCreator(initialState, postReducer);\r\n","import reducerCreator from \"../../../utils/reducerCreator\";\r\nimport {\r\n  RESET_PAGINATION,\r\n  SET_PAGINATION,\r\n} from \"../../actions/paginationActionTye\";\r\n\r\nconst initialState = {\r\n  paginator: {\r\n    pages: [],\r\n    paginatorData: {},\r\n    paginatedData: [],\r\n    totalData: [],\r\n  },\r\n};\r\n\r\nconst paginatorReducer = {\r\n  [SET_PAGINATION]: (state: any, action: any) => {\r\n    return {\r\n      ...state,\r\n      paginator: action.payload,\r\n    };\r\n  },\r\n  [RESET_PAGINATION]: (state: any, action: any) => {\r\n    return {\r\n      paginator: {\r\n        pages: [],\r\n        paginatorData: {},\r\n        paginatedData: [],\r\n        totalData: [],\r\n      },\r\n    };\r\n  },\r\n};\r\n\r\nexport default reducerCreator(initialState, paginatorReducer);\r\n","import { combineReducers } from \"redux\";\r\nimport postReducer from \"./posts/postReducer\";\r\nimport paginationReducer from \"./pagination/paginationReducer\";\r\n\r\nexport default combineReducers({\r\n  postReducer,\r\n  paginationReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose, Store } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport allReducers from \"./reducers/allReducers\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store: Store = createStore(\r\n  allReducers,\r\n  process.env.NODE_ENV === \"production\"\r\n    ? applyMiddleware(thunk)\r\n    : composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}